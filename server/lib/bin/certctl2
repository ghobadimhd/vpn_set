#!/bin/bash

VPNSET_DIR=/etc/vpnset

EASYRSA_DIR=$VPNSET_DIR/easyrsa
PKI_DIR=$EASYRSA_DIR/pki
KEYDIR=$EASYRSA_DIR/pki/private
CERTDIR=$EASYRSA_DIR/pki/issued

OPENVPN_DIR=/etc/vpnset/openvpn
OPENVPN_DATA_DIR=/etc/vpnset/openvpn
OCSERV_DIR=/etc/vpnset/ocserv
OVPN_CLIENTCONF=$EASYRSA_DIR/client.conf.tpl

EXPORT_DIR=$VPNSET_DIR/export
EXPORT_DIR_PROFILES=$EXPORT_DIR/profiles
EXPORT_DIR_CERTS=$EXPORT_DIR/certs
EXPORT_DIR_KEYS=$EXPORT_DIR/keys


[ -a $EASYRSA_DIR ] && cd $EASYRSA_DIR
export EASYRSA_BATCH=1

function list() {
    # print list of users
    
    CLIENTLIST=`ls -1 pki/issued/ | sed 's/\(.*\)\.crt/\1/'`
    if [ "$CLIENTLIST" != "0" ] ; then
        echo "$CLIENTLIST"
    fi
    return 0
}

function getprofile() {
    # Print client profile
    CLIENTNAME=${1:? "Profile name missing"}
    CLIENTLIST=`list`
    if [ "`echo "$CLIENTLIST" | grep "$CLIENTNAME"`" != '' ] ; then
        cat << _EOF_
# Openvpn client config
`if [ "$OVPN_CLIENTCONF" != "" ] then
    cat $OVPN_CLIENTCONF
fi`


`echo remote ${BRIDGE_ADDRESS:-localhost}`
`echo proto ${OVPN_PROTOCOL:-tcp}`
`echo port ${BRIDGE_OVPN_PORT:-2443}`

# CA server certificate
<ca>
`cat $EASYRSA_DIR/pki/ca.crt`
</ca>

<cert>
`cat $CERTDIR/$CLIENTNAME.crt`
</cert>

<key>
`cat $KEYDIR/$CLIENTNAME.key`
</key>
_EOF_
        return 0
    fi
}


function getcert() {
    # Print client certificate
    CLIENTNAME=$1
    CLIENTLIST=`list`

    # Check if client exists
    if [ "`echo "$CLIENTLIST" | grep "$CLIENTNAME"`" != '' ]
    then

        echo "# $CLIENTNAME Certificate"
        ./easyrsa show-cert $CLIENTNAME

        return 0
    fi
}

function getkey() {
    # Print client key
    CLIENTNAME=$1
    CLIENTLIST=`list`
    # Check if client exists
    if [ "`echo "$CLIENTLIST" | grep "$CLIENTNAME"`" != '' ]
    then
        echo "# $CLIENTNAME Private Key"
        cat $KEYDIR/$CLIENTNAME.key

        return 0
    fi
}

function addprofile() {
    # Create new client certificate and config
    if (( $# == 0 )) ; then 
        echo "Profile name is missing"
        usage
        return 1
    fi
    for CLIENTNAME in $@ ; do 
        CLIENTLIST=`list`
        if [ "`echo "$CLIENTLIST" | grep "$CLIENTNAME"`" != '' ] ; then
            echo "Profile certificate already exists"
            echo "use 'certctl2 getprofile $CLIENTNAME' to retrive it configuration"
            return 1
        fi
        
        ./easyrsa build-client-full $CLIENTNAME nopass  2> /var/log/certctl2.log > /var/log/certctl2.log
        echo "use this command to retrive it's configuration:"
        echo "certctl2 getprofile $CLIENTNAME"

    done
    return 0
}

function addprofile_bulk() {
    PREFIX=$1
    COUNT=$2
    CLIENTLIST=`list`
    if [ "$COUNT" == "" ] ; then  COUNT=0 ; fi
    if [ "$PREFIX" == "" ] ; then  echo "prefix missing\n"; usage ; return 1 ; fi
    
    for i in `seq 1 $COUNT` ; do
        CLIENTNAME=$PREFIX$i
        if [ "`echo "$CLIENTLIST" | grep "$CLIENTNAME"`" != '' ] ; then
            echo "client $CLIENTNAME certificate already exists"
        else
            ./easyrsa build-client-full $CLIENTNAME nopass  2> /var/log/certctl2.log > /var/log/certctl2.log
            echo "use this command to retrive it's configuration:"
            echo "certctl2 getprofile $CLIENTNAME"
        fi
    done
    echo "use this command to retrive it's configuration:"
    echo "certctl2 getprofile CLIENTNAME"
}

function gencrl() {
    # generate new crl.pem
    
    ./easyrsa gen-crl > ./certctl2.log
    echo "new crl generated"
}

function revoke() {
    # revoke the client certificate
    CLIENTNAME=${1:? "name missing"}
    CLIENTLIST=`list`
    if [ "`echo "$CLIENTLIST" | grep "$CLIENTNAME"`" != '' ] ; then
        

        ./easyrsa revoke $CLIENTNAME 2> /var/log/certctl2.log > /var/log/certctl2.log
        echo "certificate revoked"
        gencrl
    else
        echo "there is no client certificate with name $CLIENTNAME"
    fi
}

function getpkcs12() {
    # print client pkcs12 certificate
    CLIENTNAME=$1
    CLIENTLIST=`list`
    if [ "`echo "$CLIENTLIST" | grep "$CLIENTNAME"`" != '' ]
    then

        echo "# $CLIENTNAME Certificate"
        openssl pkcs12 -export -out - -inkey $KEYDIR/$CLIENTNAME.key -in $CERTDIR/$CLIENTNAME.crt -certfile $PKI_DIR/ca.crt -passout pass:

        return 0
    fi
}


function export_func() {
    while (( "$#" )); do
        case "$1" in
            -p12|--pkcs12)
                EXPORT_PKCS12=true
                shift
            ;;
            -p|--profiles)
                EXPORT_PROFILES=true
                shift
            ;;
            -c|--certs)
                EXPORT_CERTS=true
                shift
            ;;
            -k|--keys)
                EXPORT_KEYS=true
                shift
            ;;
            -h|--help|help|*)
                # Help
                echo "Usage: certctl2 export [-p|--profiles] [-c|--certs] [-k|--keys] [-h|--help]"
                echo "export profiles, certificates, keys to export directory accessable by frontend web server."
                echo ""
            exit 0
            ;;
        esac
    done

    PROFILE_LIST=`list`
    if ${EXPORT_PKCS12:= false} ; then
        # Clean before export
        rm $EXPORT_DIR_PKCS12/*p12 &> /dev/null
        for PKCS in $CERT_LIST ; do
            openssl pkcs12 -export -out $EXPORT_DIR_PKCS12/$PKCS.p12 -inkey $KEYDIR/$PKCS.key -in $CERTDIR/$PKCS.crt -certfile $PKI_DIR/ca.crt -passout pass:1234
        done

        chmod o=r $EXPORT_DIR_PKCS12/*p12 &> /dev/null

    fi
    if ${EXPORT_PROFILES:= false} ; then
        # Clean before export
        rm $EXPORT_DIR_PROFILES/*ovpn &> /dev/null
        for PROFILE in $PROFILE_LIST ; do
            getprofile $PROFILE > $EXPORT_DIR_PROFILES/$PROFILE.ovpn
        done

        chmod o=r $EXPORT_DIR_PROFILES/*ovpn &> /dev/null

    fi
    if ${EXPORT_CERTS:= false} ; then
        # Clean before export
        rm $EXPORT_DIR_CERTS/*crt &> /dev/null
        for PROFILE in $PROFILE_LIST ; do
            cp $CERTDIR/$PROFILE.crt  $EXPORT_DIR_CERTS/
        done
        cp $PKI_DIR/ca.crt  $EXPORT_DIR_CERTS/

        chmod o=r $EXPORT_DIR_CERTS/*crt &> /dev/null

    fi
    if ${EXPORT_KEYS:= false} ; then
        # Clean before export
        rm $EXPORT_DIR_KEYS/*key &> /dev/null
        for PROFILE in $PROFILE_LIST ; do
            cp $KEYDIR/$PROFILE.key  $EXPORT_DIR_KEYS/
        done

        chmod o=r $EXPORT_DIR_KEYS/*key &> /dev/null

    fi

    return 0
}

function init_pki() {
    # Create easyrsa CA directory
    if ! [ -a $EASYRSA_DIR ] ; then
        mkdir -p $EASYRSA_DIR
        tar xf /EasyRSA-3.1.1.tgz -C $EASYRSA_DIR  --strip-components=1
    fi
    cd $EASYRSA_DIR
    if ! [ -a pki ] ; then  
        ./easyrsa init-pki ;
        openssl rand 40 > pki/.rnd
    fi
    if ! [ -a pki/ca.crt ]; then
        EASYRSA_REQ_CN=CA ./easyrsa build-ca nopass
    fi
    if ! [ -a pki/issued/vpnset-server.crt ]; then
        echo "Create server"
        ./easyrsa build-server-full vpnset-server nopass 2> /var/log/certctl2.log > /var/log/certctl2.log
    fi

    # creating empty crl.pem
    # set defaults
    echo "Generate CRL" 
    ./easyrsa gen-crl 2> /var/log/certctl2.log > /var/log/certctl2.log

    if ! [ -a $EASYRSA_DIR/pki/dh.pem ] ; then
        ./easyrsa gen-dh &> /dev/null
    fi
    #add read and execcute access to easyrsa directories so openvpn able to read crl.pem
    chmod o+rx $EASYRSA_DIR $EASYRSA_DIR/pki $EASYRSA_DIR/pki/crl.pem $EASYRSA_DIR/pki/dh.pem


}

function create_server() {
    
    if ! [ -a pki/issued/$1.crt ]; then
        echo "Create server"
        ./easyrsa build-server-full $1 nopass 2> /var/log/certctl2.log > /var/log/certctl2.log
    fi
}

function usage() {
    # Help
    echo "addprofile, list, and print config file"
    echo ""
    echo "sub commands: "
    echo "    list                          print list of existing client certificates"
    echo "    addprofile CLIENTNAME         create new client certificate "
    echo "    addprofile_bulk PREFIX COUNT  create multiple client certificate"
    echo "    getprofile CLIENTNAME         print existing client profile"
    echo "    getcert CLIENTNAME            print existing client certificate"
    echo "    getkey CLIENTNAME             print existing client private key"
    echo "    getpkcs12 CLIENTNAME          print existing client pkcs12"
    echo "    revoke CLIENTNAME             revoke client certificate"
    echo "    gencrl [CRL_EXPIRE_DAYS]      revoke client certificate.  default is 365"
    echo "    export [-k] [-c] [-p] [-p12]  revoke client certificate"
    echo "    init-pki                      initialize new pki if it doesn't exists"
    echo "    create-server NAME            craete server certificate"
    echo "    help                          print this message"

}

function main() {
    case "$1" in
        list)
        shift
        list $@
        ;;
        addprofile)
        shift
        addprofile $@
        ;;
        addprofile_bulk)
        shift
        addprofile_bulk $@
        ;;
        getprofile)
        shift
        getprofile $@
        ;;
        getcert)
        shift
        getcert $@
        ;;
        getkey)
        shift
        getkey $@
        ;;
        getpkcs12)
        shift
        getpkcs12 $@
        ;;
        revoke)
        shift
        revoke $@
        ;;
        gencrl)
        shift
        gencrl $@
        ;;
        export)
        shift
        export_func $@
        ;;
        init-pki)
        shift
        init_pki $@
        ;;
        create-server)
        shift
        create_server $@
        ;;
        -h|--help|help)
        usage
        exit 0
        ;;
        *)    # unknown option
        echo "Unknown option $!"
        usage
        exit 1
        ;;
    esac

}

main "$@"