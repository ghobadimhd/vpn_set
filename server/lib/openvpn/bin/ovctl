#!/bin/bash

OPENVPNDIR=/etc/vpnset/openvpn
OPENVPN_DATA_DIR=/etc/vpnset/openvpn
OCSERVDIR=/etc/vpnset/ocserv
VPNSETDIR=/etc/vpnset/


EASYRSADIR=$VPNSETDIR/easyrsa
PKI_DIR=$EASYRSADIR/pki
KEYDIR=$EASYRSADIR/pki/private
CERTDIR=$EASYRSADIR/pki/issued

OVPN_CLIENTCONF=$OPENVPNDIR/client.conf

EXPORT_DIR=$OPENVPN_DATA_DIR/export
EXPORT_DIR_PROFILES=$EXPORT_DIR/profiles
EXPORT_DIR_CERTS=$EXPORT_DIR/certs
EXPORT_DIR_KEYS=$EXPORT_DIR/keys

export EASYRSA_BATCH=1

function list() {
    # print list of users
    cd $EASYRSADIR/pki/issued
    if [ "`ls -1 *.crt | grep -vc '^ov-server.crt$\|^ca.crt$'`" != "0" ] ; then
        CLIENTLIST=`ls -1 *.crt | grep -v '^ov-server.crt$\|^ca.crt$' | sed 's/\(.*\)\.crt/\1/'`
        echo "$CLIENTLIST"
    fi
    return 0
}

function getprofile() {
    # Print client profile
    CLIENTNAME=${1:? "Profile name missing"}
    CLIENTLIST=`list`
    if [ "`echo "$CLIENTLIST" | grep "$CLIENTNAME"`" != '' ] ; then
        cat << _EOF_
# Openvpn client config
`cat $OVPN_CLIENTCONF`

# CA server certificate
<ca>
`cat $EASYRSADIR/pki/ca.crt`
</ca>

<cert>
`cat $CERTDIR/$CLIENTNAME.crt`
</cert>

<key>
`cat $KEYDIR/$CLIENTNAME.key`
</key>
_EOF_
        return 0
    fi
}


function getcert() {
    # Print client certificate
    CLIENTNAME=$1
    CLIENTLIST=`list`

    # Check if client exists
    if [ "`echo "$CLIENTLIST" | grep "$CLIENTNAME"`" != '' ]
    then

        echo "# $CLIENTNAME Certificate"
        ./easyrsa show-cert $CLIENTNAME

        return 0
    fi
}

function getkey() {
    # Print client key
    CLIENTNAME=$1
    CLIENTLIST=`list`
    # Check if client exists
    if [ "`echo "$CLIENTLIST" | grep "$CLIENTNAME"`" != '' ]
    then
        echo "# $CLIENTNAME Private Key"
        cat $KEYDIR/$CLIENTNAME.key

        return 0
    fi
}

function addprofile() {
    # Create new client certificate and config
    if (( $# == 0 )) ; then 
        echo "Profile name is missing"
        usage
        return 1
    fi
    for CLIENTNAME in $@ ; do 
        CLIENTLIST=`list`
        if [ "`echo "$CLIENTLIST" | grep "$CLIENTNAME"`" != '' ] ; then
            echo "Profile certificate already exists"
            echo "use 'ovctl getprofile $CLIENTNAME' to retrive it configuration"
            return 1
        fi
        cd $EASYRSADIR
        ./easyrsa build-client-full $CLIENTNAME nopass  2> /var/log/ovctl.log > /var/log/ovctl.log
        echo "use this command to retrive it's configuration:"
        echo "ovctl getprofile $CLIENTNAME"

    done
    return 0
}

function addprofile_bulk() {
    PREFIX=$1
    COUNT=$2
    CLIENTLIST=`list`
    if [ "$COUNT" == "" ] ; then  COUNT=0 ; fi
    if [ "$PREFIX" == "" ] ; then  echo "prefix missing\n"; usage ; return 1 ; fi
    cd $EASYRSADIR
    for i in `seq 1 $COUNT` ; do
        CLIENTNAME=$PREFIX$i
        if [ "`echo "$CLIENTLIST" | grep "$CLIENTNAME"`" != '' ] ; then
            echo "client $CLIENTNAME certificate already exists"
        else
            ./pkitool  &> /dev/null  $CLIENTNAME
            echo "$CLIENTNAME"
        fi
    done
    echo "use this command to retrive it's configuration:"
    echo "ovctl getprofile CLIENTNAME"
}

function gencrl() {
    # generate new crl.pem
    cd $EASYRSADIR
    ./easyrsa gen-crl > ./ovctl.log
    echo "new crl generated"
}

function revoke() {
    # revoke the client certificate
    CLIENTNAME=${1:? "name missing"}
    CLIENTLIST=`list`
    if [ "`echo "$CLIENTLIST" | grep "$CLIENTNAME"`" != '' ] ; then
        cd $EASYRSADIR

        ./easyrsa revoke $CLIENTNAME 2> /var/log/ovctl.log > /var/log/ovctl.log
        echo "certificate revoked"
        gencrl
    else
        echo "there is no client certificate with name $CLIENTNAME"
    fi
}

function export_func() {
    while (( "$#" )); do
        case "$1" in
            -p|--profiles)
                EXPORT_PROFILES=true
                shift
            ;;
            -c|--certs)
                EXPORT_CERTS=true
                shift
            ;;
            -k|--keys)
                EXPORT_KEYS=true
                shift
            ;;
            -h|--help|help|*)
                # Help
                echo "Usage: ovctl export [-p|--profiles] [-c|--certs] [-k|--keys] [-h|--help]"
                echo "export profiles, certificates, keys to export directory accessable by frontend web server."
                echo ""
            exit 0
            ;;
        esac
    done

    PROFILE_LIST=`list`

    if ${EXPORT_PROFILES:= false} ; then
        # Clean before export
        rm $EXPORT_DIR_PROFILES/*ovpn &> /dev/null
        for PROFILE in $PROFILE_LIST ; do
            getprofile $PROFILE > $EXPORT_DIR_PROFILES/$PROFILE.ovpn
        done

        chmod o=r $EXPORT_DIR_PROFILES/*ovpn &> /dev/null

    fi
    if ${EXPORT_CERTS:= false} ; then
        # Clean before export
        rm $EXPORT_DIR_CERTS/*crt &> /dev/null
        for PROFILE in $PROFILE_LIST ; do
            cp $CERTDIR/$PROFILE.crt  $EXPORT_DIR_CERTS/
        done
        cp $PKI_DIR/$ca.crt  $EXPORT_DIR_CERTS/

        chmod o=r $EXPORT_DIR_CERTS/*crt &> /dev/null

    fi
    if ${EXPORT_KEYS:= false} ; then
        # Clean before export
        rm $EXPORT_DIR_KEYS/*key &> /dev/null
        for PROFILE in $PROFILE_LIST ; do
            cp $KEYDIR/$PROFILE.key  $EXPORT_DIR_KEYS/
        done

        chmod o=r $EXPORT_DIR_KEYS/*key &> /dev/null

    fi

    return 0
}

function init_pki() {
    # Create easyrsa CA directory
    if ! [ -a $EASYRSA_DIR ] ; then
        mkdir $EASYRSA_DIR
        tar xf /EasyRSA-3.1.1.tgz -C /etc/vpnset/openvpn/easyrsa/  --strip-components=1
        cd $EASYRSA_DIR
        if ! [ -a pki ] ; then  
            ./easyrsa init-pki ;
            openssl rand 40 > pki/.rnd
        fi
        if ! [ -a pki/ca.crt ]; then
            EASYRSA_REQ_CN=CA ./easyrsa build-ca nopass
        fi
        if ! [ -a pki/issued/ov-server.crt ]; then
            echo "Create server"
            ./easyrsa build-server-full ov-server nopass 2> /var/log/ovctl.log > /var/log/ovctl.log
        fi

        # creating empty crl.pem
        # set defaults
        echo "Generate CRL" 
        ./easyrsa gen-crl 2> /var/log/ovctl.log > /var/log/ovctl.log

        if ! [ -a $EASYRSA_DIR/pki/dh.pem ] ; then
            ./easyrsa gen-dh &> /dev/null
        fi
        #add read and execcute access to easyrsa directories so openvpn able to read crl.pem
        chmod o+rx $EASYRSA_DIR $EASYRSA_DIR/pki $EASYRSA_DIR/pki/crl.pem $EASYRSA_DIR/pki/dh.pem
    fi

}

function create-server() {
    cd $EASYRSA_DIR
    if ! [ -a pki/issued/$1.crt ]; then
        echo "Create server"
        ./easyrsa build-server-full $1 nopass 2> /var/log/ovctl.log > /var/log/ovctl.log
    fi
}

function usage() {
    # Help
    echo "addprofile, list, and print config file"
    echo ""
    echo "sub commands: "
    echo "    list                       print list of existing client certificates"
    echo "    addprofile CLIENTNAME         create new client certificate "
    echo "    addprofile_bulk PREFIX COUNT  create multiple client certificate"
    echo "    getprofile CLIENTNAME      print existing client profile"
    echo "    getcert CLIENTNAME         print existing client certificate"
    echo "    getkey CLIENTNAME          print existing client private key"
    echo "    revoke CLIENTNAME          revoke client certificate"
    echo "    gencrl [CRL_EXPIRE_DAYS default is 365]          revoke client certificate"
    echo "    export [-k] [-c] [-p]      revoke client certificate"
    echo "    init-pki                    revoke client certificate"
    echo "    create-server NAME         revoke client certificate"
    echo "    help                       print this message"

}

function main() {
    case "$1" in
        list)
        shift
        list $@
        ;;
        addprofile)
        shift
        addprofile $@
        ;;
        addprofile_bulk)
        shift
        addprofile_bulk $@
        ;;
        getprofile)
        shift
        getprofile $@
        ;;
        getcert)
        shift
        getcert $@
        ;;
        getkey)
        shift
        getkey $@
        ;;
        revoke)
        shift
        revoke $@
        ;;
        gencrl)
        shift
        gencrl $@
        ;;
        export)
        shift
        export_func $@
        ;;
        init-pki)
        shift
        init_pki $@
        ;;
        create-server)
        shift
        export_func $@
        ;;
        -h|--help|help)
        usage
        exit 0
        ;;
        *)    # unknown option
        echo "Unknown option $!"
        usage
        exit 1
        ;;
    esac

}

main "$@"